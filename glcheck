#!/usr/bin/env node
///////////////////////////////////////////////////////////////////////////////////
// The MIT License (MIT)
//
// Copyright (c) 2019 Tarek Sherif
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
///////////////////////////////////////////////////////////////////////////////////

"use strict";

const puppeteer = require("puppeteer");
const pti = require("puppeteer-to-istanbul");
const http = require("http");
const fs = require("fs").promises;
const path = require("path");
const glob = require("glob").sync;
const copydir = require("copy-dir").sync;
const rimraf = require("rimraf").sync;
const PNG = require("pngjs").PNG.sync;
const pixelmatch = require("pixelmatch");

//////////////////
// CONFIGURATION
//////////////////


const GLTEST_PKG = require(path.resolve(__dirname, "package.json"));
const HELP_MESSAGE = `usage: glcheck [--help] [--version] [--config PATH] [--coverage {true/false}] 
              [--headless {true/false}] [--server-port PORT] [--render-test-threshold VAL] 
              [--unit-test-dir PATH] [--reference-image-dir PATH] [--asset-dir PATH]

Test WebGL 1 and 2 applications.

Optional arguments:
  --help                        Show this help message and exit.
  --version                     Show program's version number and exit.
  --config PATH                 Path to config file (default: ./glcheck.config.json)
  --coverage {true/false}       Generate coverage results that can be consumed by Istanbul [default: false].
  --headless {true/false}       Run headless [default: true].
  --server-port PORT            Port to run testing server on [default: 7171].
  --render-test-threshold VAL   Match threshold between 0 and 1 for render tests [default: 0.99].
  --unit-test-dir PATH             Path to output results to [default: glcheck-tests/unit-tests/].
  --reference-image-dir PATH    Path to output results to [default: glcheck-tests/reference-images/].
  --asset-dir PATH              Path to copy assets from.
`;

let config = {
    unitTestDir: "glcheck-tests/unit-tests/",
    serverPort: 7171,
    unitTests: [],
    renderTests: [],
    referenceImageDir: "glcheck-tests/reference-images/",
    renderTestThreshold: 0.99,
    assetDir: null,
    coverage: false,
    coverageExcludeFiles: [],
    headless: true
};

const argv = process.argv.slice(2);
const argc = argv.length;
const args = {};

for (let i = 0; i < argc; ++i) {
    let [ flag, arg ] = argv[i].split("=");

    switch(flag) {
        case "--config":
            args.configPath = arg || argv[++i];
            break;
        case "--coverage":
            arg = arg || argv[++i];
            args.coverage = arg.toLowerCase() !== "false";
            break;
        case "--headless":
            arg = arg || argv[++i];
            args.headless = arg.toLowerCase() !== "false";
            break;
        case "--server-port":
            args.serverPort = parseInt(arg || argv[++i], 10);
            break;
        case "--render-test-threshold":
            args.renderTestThreshold = parseFloat(arg || argv[++i]);
            break;
        case "--unit-test-dir":
            args.unitTestDir = arg || argv[++i];
            break;
        case "--reference-image-dir":
            args.referenceImageDir = arg || argv[++i];
            break;
        case "--asset-dir":
            args.assetDir = arg || argv[++i];
            break;
        case "--self-test":
            args.selfTest = true;
            break;
        case "--clear-config":
            args.clearConfig = true;
            break;
        case "--version":
            console.log(GLTEST_PKG.version);
            process.exit(0);
            break;
        case "--help":
            console.log(HELP_MESSAGE);
            process.exit(0);
            break;
        default: 
            console.log(`\u001b[31mgltest unknown argument: ${flag}\u001b[0m`);
            process.exit(1);
    }
}

const configPath = path.resolve(".", args.configPath || "glcheck.config.json");

try {
    Object.assign(config, require(configPath));
    config.unitTests = config.unitTests || [];
    config.renderTests = config.renderTests || [];
    config.coverageExcludeFiles = config.coverageExcludeFiles || [];
    if (!Array.isArray(config.unitTests)) {
        config.unitTests = [ config.unitTests ];
    }
    if (!Array.isArray(config.renderTests)) {
        config.renderTests = [ config.renderTests ];
    }
    if (!Array.isArray(config.coverageExcludeFiles)) {
        config.coverageExcludeFiles = [ config.coverageExcludeFiles ];
    }
} catch (e) {
    if (args.configPath) {
        console.log(`\u001b[31mError: Config file '${args.configPath}' not found.\u001b[0m\n`);
        process.exit(1);
    }
}

if (args.clearConfig) {
    config = { 
        unitTests: config.unitTests,
        renderTests: config.renderTests,
        coverageExcludeFiles: config.coverageExcludeFiles
    };
}

Object.assign(config, args);


const SELF_TEST = Boolean(args.selfTest);
const UNIT_TEST_DIR = path.resolve(".", config.unitTestDir);
const ASSET_DIR = path.resolve(UNIT_TEST_DIR, "assets");
const COVERAGE_DIR = path.resolve(".", ".nyc_output");
const REFERENCE_IMAGE_DIR = path.resolve(".", config.referenceImageDir);
const BASE_URL = `http://localhost:${config.serverPort}/`;
const RENDER_TIMEOUT = 5000;
const RENDER_POLLING = 50;


/////////////////
// LOCAL SERVER
/////////////////

const MIME_TYPES = {
    ".css": "text/css",
    ".html": "text/html",
    ".js": "text/javascript",
    ".json": "application/json",
    ".txt": "text/plain",
    ".jpeg": "image/jpeg",
    ".jpg": "image/jpeg",
    ".png": "image/png",
    ".gif": "image/gif",
    ".bmp": "image/bmp",
    ".mov": "video/quicktime",
    ".mpeg": "video/mpeg",
    ".mpg": "video/mpeg",
    ".ogv": "video/ogg"
};

const coverageExcludeFiles = config.unitTests.concat(config.coverageExcludeFiles);
const EXCLUDE_REGEX = [];
coverageExcludeFiles.forEach(ex => {
    glob(ex).map(p => {
        EXCLUDE_REGEX.push(new RegExp(`/${p}$`));
    }); 
});

const server = http.createServer((req, res) => {
    const url = req.url; 
    const requestPath = decodeURI(url.replace(/^\/+/, "").replace(/\?.*$/, ""));
    const filePath = path.resolve(".", requestPath);
    const mimeType = MIME_TYPES[path.extname(filePath)] || "application/octet-stream";

    fs.readFile(filePath).then(content => {
        res.setHeader("Content-Type", mimeType);
        res.end(content);
    });
}).listen(config.serverPort);

(async () => {

    //////////////
    // RUN TESTS
    //////////////

    // Report results per test
    let results = {
        passed: true,
        numTests: 0,
        numAssertions: 0,
        numFailed: 0
    };

    /////////////////////
    // LAUNCH PUPPETEER
    /////////////////////


    const browser = await puppeteer.launch({headless: config.headless});
    const page = await browser.newPage();

    /////////////////////////////////////
    // PAGE ERROR HANDLERS AND COVERAGE
    /////////////////////////////////////

    // Report errors from the page
    page.on("console", msg => {
        if (msg.type() === "error") {
            console.log(`\u001b[31m${msg.text()}\u001b[0m\n`);
        }
    });

    page.on("pageerror", error => {
        console.log(`\u001b[31m${error.message}\u001b[0m\n`);

        server.close();
        browser.close();

        process.exit(1);
    });


    if (config.coverage) {
        rimraf(COVERAGE_DIR);
        await page.coverage.startJSCoverage({
            resetOnNavigation: false
        });
    }

    if (config.unitTests.length > 0) {
        ///////////////////////////////
        // SET UP UNIT TEST DIRECTORY
        ///////////////////////////////

        rimraf(UNIT_TEST_DIR);

        const [ template, qunit, glcheck ] = await Promise.all([
            fs.readFile(path.resolve(__dirname, "page/index-template.html"), "utf8"),
            fs.readFile(path.resolve(__dirname, "page/qunit-2.9.2.js"), "utf8"),
            fs.readFile(path.resolve(__dirname, "page/glcheck.js"), "utf8"),
            fs.mkdir(UNIT_TEST_DIR, {recursive: true})
        ]);

        const testPaths = [];
        config.unitTests.forEach(t => {
            glob(t).forEach(p => {
                testPaths.push(`import "/${p}";`);
            });
        });

        let index = template
        .replace("QUNIT_IMPORT", qunit)
        .replace("GLTEST_IMPORT", SELF_TEST ? "<script src=\"./glcheck.js\"></script>" : `<script>${glcheck}</script>`)
        .replace("FRAMEWORK_IMPORTS", testPaths.join("\n"));

        const writes = [ fs.writeFile(path.resolve(UNIT_TEST_DIR, "index.html"), index) ];

        if (config.assetDir) {
            writes.push(fs.mkdir(ASSET_DIR).then(() => copydir(path.resolve(".", config.assetDir), ASSET_DIR)));
        }

        if (SELF_TEST) {
            // Include glcheck.js as external script so it shows up in coverage reports
            writes.push(fs.writeFile(path.resolve(UNIT_TEST_DIR, "glcheck.js"), glcheck));
        }

        await Promise.all(writes);

        await new Promise((resolve) => {
            ///////////////////
            // RUN UNIT TESTS
            ///////////////////

            const testEndPromise = page.exposeFunction("glcheck_testEnd", (test) => {
                const assertions = test.assertions;
                const count = assertions.length;
                if (count === 0) {
                    return;
                }
                results.numTests++;
                results.numAssertions += count;
                if (test.status === "passed") {
                    console.log(`\u001b[32m\u2714\u001b[0m ${test.name}`);
                } else {
                    for (let j = 0; j < count; ++j) {
                        const assertion = assertions[j];
                        if (!assertion.passed) {
                            console.log(`\n\u001b[31m\u274c\u001b[0m ${test.name}: ${assertion.message}`);
                            console.log(`    ${assertion.negative ? "Did not expect:" : "Expected: "}\u001b[32m ${JSON.stringify(assertion.expected)}\u001b[0m`);
                            console.log(`    Got:${" ".repeat(assertion.negative ? 11 : 6)}\u001b[31m ${JSON.stringify(assertion.actual)}\u001b[0m\n`);
                            console.log(assertion.stack);
                            console.log("\n");
                        }
                    }
                }
            });

            // Report final results
            const runEndPromise = page.exposeFunction("glcheck_runEnd", (run) => {
                results.passed = run.status === "passed";
                results.numFailed = run.testCounts.failed;

                resolve();
            });

            return Promise.all([ testEndPromise, runEndPromise ])
            .then(() => page.goto(`${BASE_URL}${config.unitTestDir}/index.html`));
        });
    }

    if (config.renderTests.length > 0) {
        /////////////////
        // RENDER TESTS
        /////////////////

        

        /////////////////////////////////
        // SET UP RENDER TEST DIRECTORY
        /////////////////////////////////

        await fs.mkdir(REFERENCE_IMAGE_DIR, {recursive: true});
        
        const renderTestURLs = [];
        config.renderTests.forEach((t) => {
            glob(t).forEach(p => {
                renderTestURLs.push({
                    testURL: `${BASE_URL}${p}`,
                    testPath: p,
                    referenceFileName: `${p.replace(/\//g, "-")}.png`
                });
            });
        });

        /////////////////////
        // RUN RENDER TESTS
        /////////////////////


        const instrumentAnimationFrame = `
            window.glcheck_instrumentAnimationFrame = function(numFrames) {
                if (window.GLCHECK_RAF_INSTRUMENTED) {
                    return;
                }

                let currentFrame = 0;
                const raf = window.requestAnimationFrame;
                window.requestAnimationFrame = (fn) => {
                    if (currentFrame++ < numFrames) {
                        return raf(fn);
                    } else {
                        window.glcheck_renderDone = true;
                    }
                };

                window.GLCHECK_RAF_INSTRUMENTED = true;
            };
        `;
        
        await page.evaluateOnNewDocument(instrumentAnimationFrame);

        let renderTestPromises = Promise.resolve();
        renderTestURLs.forEach(({testURL, testPath, referenceFileName}) => {
            const referencePath = path.resolve(REFERENCE_IMAGE_DIR, referenceFileName);
            renderTestPromises = renderTestPromises.then(() => {
                return fs.stat(referencePath)
                .then(() => {
                    results.numAssertions++;
                    results.numTests++;

                    return page.goto(testURL)
                    .then(() => page.waitForFunction("window.glcheck_renderDone", {polling: RENDER_POLLING, timeout: RENDER_TIMEOUT}))
                    .then(() => Promise.all([ page.screenshot(), fs.readFile(referencePath) ]))
                    .then(([ actualData, expectedData ]) => {
                        const actual = PNG.read(actualData);
                        const expected = PNG.read(expectedData);
                        const numPixels = actual.width * actual.height;

                        const diff = pixelmatch(actual.data, expected.data, null, actual.width, actual.height);
                        const match = 1.0 - diff / numPixels;

                        const passed = match >= config.renderTestThreshold;

                        if (passed) {
                            console.log(`\u001b[32m\u2714\u001b[0m Render: ${testPath}`);
                        } else {
                            results.passed = false;
                            results.numFailed++;
                            console.log(`\n\u001b[31m\u274c\u001b[0m Render: ${testPath}`);
                            console.log(`    Threshold:  \u001b[32m${config.renderTestThreshold}\u001b[0m`);
                            console.log(`    Match:      \u001b[31m${match.toFixed(3)}\u001b[0m\n`);
                            console.log("\n");
                        }
                    }).catch(e => {
                        results.passed = false;
                        results.numFailed++;
                        console.log(`\n\u001b[31m\u274c\u001b[0m Render: ${testPath}\n`);
                        if (e.name === "TimeoutError") {
                            console.log("\u001b[31mError: Render test timeout (did you forget to set 'glcheck_renderDone' in the page?)\u001b[0m\n");
                        } else {
                            console.log(`\u001b[31m${e.stack}\u001b[0m\n`);
                        }
                    });
                }).catch(() => {
                    console.log(`\n\u001b[33mCapturing reference image: ${testPath}\u001b[0m`);
                    
                    return page.goto(testURL)
                    .then(() => page.waitForFunction("window.glcheck_renderDone", {polling: RENDER_POLLING, timeout: RENDER_TIMEOUT}))
                    .then(() => page.screenshot({ path: referencePath }))
                    .catch((e) => {
                        console.log(`\n\u001b[31mError while capturing reference image: ${testPath}\u001b[0m`);
                        if (e.name === "TimeoutError") {
                            console.log("\u001b[31mRender test timeout (did you forget to set 'glcheck_renderDone' in the page?)\u001b[0m\n");
                        } else {
                            console.log(`\u001b[31m${e.stack}\u001b[0m\n`);
                        }
                    });
                }); 
            });
        });

        await renderTestPromises;
    }

    if (config.coverage) {

        ////////////////////
        // COVERAGE REPORT
        ////////////////////

        await page.coverage.stopJSCoverage().then((jsCoverage) => {
            jsCoverage = jsCoverage.filter(item => {
                const url = item.url;

                // Filter out scripts embedded in index.html
                // (i.e. test runner scripts)
                if (url.match(/\.html$/)) {
                    return false;
                }

                // Filter out test files and files
                // excluded by config
                let include = true;
                EXCLUDE_REGEX.forEach(ex => {
                    if (url.match(ex)) {
                        include = false;
                    }
                });

                return include; 
            });

            // Puppeteer to Istanbul separates repeat entries
            const consolidatedEntries = {};
            jsCoverage.forEach(item => {
                const url = item.url;

                if (url.match(/-\d+\.js/)) console.log(url);

                if (!consolidatedEntries[url]) {
                    consolidatedEntries[url] = item;  
                } else {
                    consolidatedEntries[url].ranges = consolidatedEntries[url].ranges.concat(item.ranges);
                }
            });


            const consolidatedCoverage = [];
            for (const url in consolidatedEntries) {
                consolidatedCoverage.push(consolidatedEntries[url]);
            }
            console.log(consolidatedCoverage.map(i => i.url).sort().join("\n"));

            pti.write(consolidatedCoverage);
        });
    }

    ////////////////////
    // FINAL REPORT
    ////////////////////

    console.log(`\nRan ${results.numTests} tests (${results.numAssertions} assertions)...\n`);

    if (results.passed) {
        console.log("\u001b[32mAll tests passed!\u001b[0m\n");
    } else {
        console.log(`\t\u001b[31m${results.numFailed} tests failed.\u001b[0m\n\n`);
    }

    await Promise.all([
        server.close(),
        browser.close()
    ]);

    process.exit(results.passed ? 0 : 1);
})();

